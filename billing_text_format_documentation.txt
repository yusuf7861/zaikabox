# ZaikaBox Billing Text Format Documentation

This document describes the format of the text-based bill generated by the ZaikaBox API. This format is designed to be easily parsed by frontend applications for displaying bill information.

## API Endpoint

The text bill can be retrieved from the following endpoint:

```
GET /api/v1/orders/{orderId}/bill/text
```

This endpoint returns a plain text file with the bill information.

## Text Format Structure

The text bill follows a specific format with sections separated by line breaks and formatting characters. Below is a description of each section:

### 1. Header Section

```
===========================================
            ZaikaBox - Order Bill          
===========================================
```

The header section contains the title of the bill centered within a line of equals signs.

### 2. Order Details Section

```
Order ID: [ORDER_ID]
Order Date: [ORDER_DATE]
Payment Mode: [PAYMENT_MODE]
Status: [ORDER_STATUS]
```

This section contains basic information about the order including:
- Order ID: A unique identifier for the order (e.g., FD12345)
- Order Date: The date and time when the order was placed (format: dd-MM-yyyy HH:mm:ss)
- Payment Mode: The payment method used (e.g., CASH, CARD)
- Status: The current status of the order (e.g., PENDING, COMPLETED)

### 3. Items Table Section

```
No.   Item                           Qty      Unit Price   Total       
-------------------------------------------------------------------
1     [ITEM_NAME]                    [QTY]    $[UNIT_PRICE] $[TOTAL]
2     [ITEM_NAME]                    [QTY]    $[UNIT_PRICE] $[TOTAL]
...
-------------------------------------------------------------------
```

This section contains a table of ordered items with the following columns:
- No.: The item number (starting from 1)
- Item: The name of the food item (truncated to 30 characters if longer)
- Qty: The quantity of the item ordered
- Unit Price: The price per unit of the item (in dollars)
- Total: The total price for the item (quantity Ã— unit price)

### 4. Totals Section

```
Subtotal:                                      $[SUBTOTAL]
GST ([GST_RATE]%):                             $[GST_AMOUNT]
Total:                                         $[TOTAL_AMOUNT]
```

This section contains the total amounts:
- Subtotal: The sum of all item totals
- GST: The Goods and Services Tax amount (calculated as a percentage of the subtotal)
- Total: The final amount including GST

### 5. Footer Section

```
===========================================
          Thank you for your order!        
===========================================
```

The footer section contains a thank you message centered within a line of equals signs.

## Example

Here's an example of a complete text bill:

```
===========================================
            ZaikaBox - Order Bill          
===========================================

Order ID: FD12345
Order Date: 15-06-2023 14:30:45
Payment Mode: CARD
Status: COMPLETED

No.   Item                           Qty      Unit Price   Total       
-------------------------------------------------------------------
1     Butter Chicken                 2        $12.99       $25.98      
2     Garlic Naan                    4        $2.50        $10.00      
3     Mango Lassi                    2        $3.99        $7.98       
-------------------------------------------------------------------

Subtotal:                                      $43.96
GST (5.0%):                                    $2.20
Total:                                         $46.16

===========================================
          Thank you for your order!        
===========================================
```

## Parsing Guidelines for Frontend

When parsing this text format in the frontend:

1. Split the content by lines
2. Identify sections by looking for separator lines (e.g., lines with "====" or "----")
3. Extract order details by looking for key-value pairs (e.g., "Order ID: FD12345")
4. Parse the items table by identifying the header row and then processing each item row
5. Extract totals by looking for specific labels (e.g., "Subtotal:", "GST", "Total:")

This structured format allows for consistent parsing and display of bill information in the frontend application.